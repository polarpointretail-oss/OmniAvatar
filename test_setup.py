#!/usr/bin/env python3
"""
Test script to verify OmniAvatar setup is working correctly
"""

import sys
import os

# Add the current directory to Python path
sys.path.append(os.path.abspath('.'))

def test_imports():
    """Test all critical imports"""
    print("Testing imports...")
    
    try:
        # Test basic imports
        import torch
        print("‚úÖ torch imported successfully")
        
        import transformers
        print("‚úÖ transformers imported successfully")
        
        import librosa
        print("‚úÖ librosa imported successfully")
        
        import peft
        print("‚úÖ peft imported successfully")
        
        import xfuser
        print("‚úÖ xfuser imported successfully")
        
        # Test OmniAvatar imports
        from OmniAvatar.utils.args_config import parse_args
        print("‚úÖ OmniAvatar.utils.args_config imported successfully")
        
        from OmniAvatar.models.wav2vec import Wav2VecModel
        print("‚úÖ OmniAvatar.models.wav2vec imported successfully")
        
        from OmniAvatar.models.model_manager import ModelManager
        print("‚úÖ OmniAvatar.models.model_manager imported successfully")
        
        from OmniAvatar.wan_video import WanVideoPipeline
        print("‚úÖ OmniAvatar.wan_video imported successfully")
        
        print("\nüéâ All imports successful!")
        return True
        
    except Exception as e:
        print(f"‚ùå Import failed: {e}")
        return False

def test_config_loading():
    """Test config file loading"""
    print("\nTesting config loading...")
    
    try:
        import yaml
        
        # Test loading the optimized config
        with open('configs/inference_1.3B_optimized.yaml', 'r') as f:
            config = yaml.safe_load(f)
        
        print("‚úÖ Config file loaded successfully")
        print(f"   - Model path: {config.get('exp_path', 'NOT_FOUND')}")
        print(f"   - DIT path: {config.get('dit_path', 'NOT_FOUND')}")
        print(f"   - VAE path: {config.get('vae_path', 'NOT_FOUND')}")
        print(f"   - Text encoder path: {config.get('text_encoder_path', 'NOT_FOUND')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Config loading failed: {e}")
        return False

def test_file_existence():
    """Test that required files exist"""
    print("\nTesting file existence...")
    
    required_files = [
        'configs/inference_1.3B_optimized.yaml',
        'examples/infer_samples.txt',
        'examples/images/0000.jpeg',
        'examples/audios/0000.MP3',
        'scripts/inference.py'
    ]
    
    all_exist = True
    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path} exists")
        else:
            print(f"‚ùå {file_path} missing")
            all_exist = False
    
    return all_exist

def test_wav2vec_fix():
    """Test that the SDPA fix is in place"""
    print("\nTesting SDPA fix...")
    
    try:
        with open('OmniAvatar/models/wav2vec.py', 'r') as f:
            content = f.read()
        
        if 'self.config.output_attentions = False' in content:
            print("‚úÖ SDPA fix found in forward method")
        else:
            print("‚ùå SDPA fix missing in forward method")
            return False
            
        if 'self.config.output_attentions = True' in content:
            print("‚úÖ encode method has correct setting")
        else:
            print("‚ùå encode method missing correct setting")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå SDPA fix test failed: {e}")
        return False

def main():
    """Run all tests"""
    print("üîç OmniAvatar Setup Test")
    print("=" * 50)
    
    tests = [
        test_imports,
        test_config_loading,
        test_file_existence,
        test_wav2vec_fix
    ]
    
    all_passed = True
    for test in tests:
        if not test():
            all_passed = False
    
    print("\n" + "=" * 50)
    if all_passed:
        print("üéâ ALL TESTS PASSED! OmniAvatar should work correctly.")
        print("\nYou can now run:")
        print("torchrun --standalone --nproc_per_node=1 scripts/inference.py \\")
        print("  --config configs/inference_1.3B_optimized.yaml \\")
        print("  --input_file examples/infer_samples.txt")
    else:
        print("‚ùå Some tests failed. Please fix the issues above.")
    
    return all_passed

if __name__ == "__main__":
    main() 