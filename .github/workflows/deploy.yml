name: Deploy OmniAvatar

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.9'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch==2.4.0 torchvision==0.19.0 torchaudio==2.4.0 --index-url https://download.pytorch.org/whl/cpu
        pip install -r requirements.txt
        # Skip flash_attn for CI as it requires CUDA
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
    
    - name: Test imports
      run: |
        python -c "import OmniAvatar; print('OmniAvatar import successful')"

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools twine
    
    - name: Create setup.py if not exists
      run: |
        if [ ! -f setup.py ]; then
          cat > setup.py << 'EOF'
        from setuptools import setup, find_packages
        
        with open("README.md", "r", encoding="utf-8") as fh:
            long_description = fh.read()
        
        with open("requirements.txt", "r", encoding="utf-8") as fh:
            requirements = [line.strip() for line in fh if line.strip() and not line.startswith("#")]
        
        setup(
            name="omni-avatar",
            version="0.1.0",
            author="OmniAvatar Team",
            description="Efficient Audio-Driven Avatar Video Generation with Adaptive Body Animation",
            long_description=long_description,
            long_description_content_type="text/markdown",
            url="https://github.com/polarpointretail-oss/OmniAvatar",
            packages=find_packages(),
            classifiers=[
                "Development Status :: 3 - Alpha",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.9",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.11",
            ],
            python_requires=">=3.9",
            install_requires=requirements,
            entry_points={
                "console_scripts": [
                    "omni-avatar=scripts.inference:main",
                ],
            },
        )
        EOF
        fi
    
    - name: Build package
      run: |
        python -m build
    
    - name: Create Release Archive
      run: |
        mkdir -p release
        tar -czf release/omni-avatar-${{ github.sha }}.tar.gz \
          --exclude='.git' \
          --exclude='release' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          .
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: omni-avatar-dist
        path: |
          dist/
          release/
    
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    
    - name: Deploy to PyPI
      if: startsWith(github.ref, 'refs/tags/')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        python -m twine upload dist/* --skip-existing
      continue-on-error: true

  deploy-docs:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install documentation dependencies
      run: |
        pip install mkdocs mkdocs-material mkdocstrings[python]
    
    - name: Create basic mkdocs config
      run: |
        if [ ! -f mkdocs.yml ]; then
          cat > mkdocs.yml << 'EOF'
        site_name: OmniAvatar Documentation
        site_url: https://polarpointretail-oss.github.io/OmniAvatar
        repo_url: https://github.com/polarpointretail-oss/OmniAvatar
        repo_name: polarpointretail-oss/OmniAvatar
        
        theme:
          name: material
          features:
            - navigation.tabs
            - navigation.sections
            - navigation.expand
            - search.highlight
        
        nav:
          - Home: index.md
          - Installation: installation.md
          - Usage: usage.md
          - API Reference: api.md
        
        plugins:
          - search
          - mkdocstrings:
              handlers:
                python:
                  paths: [.]
        EOF
        fi
    
    - name: Create docs directory structure
      run: |
        mkdir -p docs
        if [ ! -f docs/index.md ]; then
          cp README.md docs/index.md
        fi
        
        if [ ! -f docs/installation.md ]; then
          cat > docs/installation.md << 'EOF'
        # Installation
        
        ## Requirements
        
        - Python 3.9 or higher
        - CUDA-compatible GPU (recommended)
        
        ## Install from PyPI
        
        ```bash
        pip install omni-avatar
        ```
        
        ## Install from Source
        
        ```bash
        git clone https://github.com/polarpointretail-oss/OmniAvatar.git
        cd OmniAvatar
        pip install torch==2.4.0 torchvision==0.19.0 torchaudio==2.4.0 --index-url https://download.pytorch.org/whl/cu124
        pip install -r requirements.txt
        pip install flash_attn  # Optional, for acceleration
        ```
        EOF
        fi
        
        if [ ! -f docs/usage.md ]; then
          cat > docs/usage.md << 'EOF'
        # Usage
        
        ## Basic Usage
        
        ```python
        from OmniAvatar.wan_video import WanVideoPipeline
        
        # Initialize the pipeline
        pipeline = WanVideoPipeline()
        
        # Generate avatar video from audio
        video = pipeline.generate(audio_path="input.wav")
        ```
        
        ## Command Line Interface
        
        ```bash
        omni-avatar --input audio.wav --output video.mp4
        ```
        EOF
        fi
    
    - name: Build documentation
      run: |
        mkdocs build
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site